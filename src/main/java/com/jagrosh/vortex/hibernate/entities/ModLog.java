package com.jagrosh.vortex.hibernate.entities;

import com.jagrosh.vortex.Action;
import com.jagrosh.vortex.hibernate.internal.PreciseToSecondInstantConverter;
import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.io.Serializable;
import java.time.Instant;

/**
 * A super class for all persistant Modlog objects such as {@link BanLog} or {@link WarnLog} that are generated by the Hibernate ORM
 * Each object represents a modlog case, which goes on a users record. For example, if a user gets banned a {@link BanLog}
 * will be added to the Database.
 */
@Entity
@Data
@IdClass(ModLog.Id.class)
@Inheritance(strategy = InheritanceType.JOINED)
@NoArgsConstructor
public abstract class ModLog {
    /**
     * The guild's ID
     **/
    @jakarta.persistence.Id
    @Column(name = "GUILD_ID", nullable = false)
    private long guildId;

    /**
     * The modlog case ID, which will always be an Integer greater than 0
     */
    @jakarta.persistence.Id
    @Column(name = "CASE_ID", nullable = false)
    private int caseId;

    /**
     * The ID of the user being punished
     */
    @Column(name = "USER_ID", nullable = false)
    private long userId;

    /**
     * The username of the user being punished
     */
    @Column(name = "USER_NAME", nullable = false)
    private String userName;

    /**
     * The ID of the mod that punished the user
     */
    @Column(name = "PUNISHING_MOD_ID", nullable = false)
    private long punishingModId;

    /**
     * The username of the mod that punished the user
     */
    @Column(name = "PUNISHING_MOD_NAME", nullable = false)
    private String punishingModName;

    /**
     * The unix timestamp of the punishments starting time, or when the punishment was logged.
     * The {@link Instant} is only stored precise to the second in the database
     */
    @Column(name = "PUNISHMENT_TIME", nullable = false)
    @Convert(converter= PreciseToSecondInstantConverter.class)
    private Instant punishmentTime;

    /**
     * The reason for the log, as specified by the punishing mod. This value can be edited by other mods
     * and can be set to null to indicate that no reason was specified
     */
    @Column(name = "REASON")
    private String reason;

    public void setReason(String reason) {
        this.reason = reason == null ? "" : reason;
    }

    /**
     * If a reason was provided to the modlog
     * @return {@code true} if {@link #getReason()} will not be blank or {@code null}
     */
    public boolean hasReason() {
        return reason != null && !reason.isBlank();
    }

    /**
     * The corresponding action type of the modlog
     */
    public abstract Action actionType();

    @Data
    @AllArgsConstructor
    @NoArgsConstructor
    public static class Id implements Serializable {
        private long guildId;
        int caseId;
    }
}